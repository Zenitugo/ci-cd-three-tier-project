name: CI/CD Workflow for a full stack application
on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      action:
        description: 'Actions to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - 'deploy'
          - 'destroy'

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'deploy' || github.event_name == 'push'
    
    env:
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
      REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.29.0'
      id: Install


    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3 

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: eu-west-1
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    

    - name: Build and push Backend Docker image
      run: |
        cd api 
        docker build \
          --build-arg AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \
          --build-arg AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
          --build-arg AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }} \
          -t ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest \
          .

        docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest

    - name: Build and push Frontend Docker image
      run: |
        cd front-end-nextjs
        docker buildx build \
        --build-arg REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }} \
        -t ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest \
        -f Dockerfile .

        docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest

  
  
    - name: Deploy the Kubernetes Engine
      run: |
        cd terraform-eks
        terraform init
        terraform plan -var-file=terraform.tfvars -out=tfplan  # using the -out flag to save the execution plan to a file
        terraform apply -auto-approve tfplan

    - name: Access Cluster
      run: aws eks update-kubeconfig --region eu-west-1 --name fullStackAppCluster

    - name: Create Namespace
      run: |
        kubectl create ns grafana
        kubectl create ns flux-system
        kubectl create ns ingress-nginx
        kubectl create ns cloudwatch
        kubectl create ns qr-app
        kubectl create ns cert-manager

    - name: Create Kubernetes secrets for the backend
      run: |
        kubectl create secret generic aws-secrets \
        --from-literal=aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }} \
        --from-literal=aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
        --from-literal=aws_bucket_name=${{ secrets.AWS_BUCKET_NAME }} \
        -n qr-app

    - name: Create Kubernetes secrets for the frontend
      run: |
        kubectl create secret generic backend-url  \
        --from-literal=react_app_api_url=${{ secrets.REACT_APP_API_URL }} \
        -n qr-app

    - name: Install Grafana into the cluster
      run: |
        if kubectl get deployment grafana -n grafana; then
          echo "Grafana already installed"
        else
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          helm install grafana grafana/grafana --namespace grafana --set persistence.enabled=true --set adminUser=admin --set adminPassword=admin256  
        fi

    - name: Install nginx ingress controller
      run:  |
        if kubectl get deployment ingress-nginx-controller -n ingress-nginx; then
          echo "ingress-nginx controller installed"
        else
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.0/deploy/static/provider/aws/deploy.yaml
        fi
                
    - name: Install Cert Manager
      run: 
        helm repo add jetstack https://charts.jetstack.io && helm repo update && helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.15.3 --set installCRDs=true --set prometheus.enabled=false
          

    - name: Set up GitHub Token for flux
      run: export GITHUB_TOKEN=${{ secrets.GH_TOKEN }}

    - name: Install Flux CLI
      run: |
        curl -s https://fluxcd.io/install.sh | sudo bash

    - name: Bootstrap Flux with Github
      run: |
        flux bootstrap github \
        --token-auth \
        --owner=Zenitugo \
        --repository=ci-cd-three-tier-project \
        --branch=master \
        --path=./manifest \
        --personal      

        
    - name: Create Flux dashboard to visualize the deployment
      run: |
        cd manifest
        kubectl apply -f capacitor-dashboard.yml
        
        
    - name: Deploy ingress-nginx
      run: |
        cd routing
        kubectl apply -f ingressnginx.yml
        
    - name: Deploy cloud watch
      run: |
        cd observability
        kubectl apply -f cloudwatch.yml
        kubectl apply -f cloudwatch-configmap.yml
  

  destroy:
    runs-on: ubuntu-latest      # This ensures the destroy job runs after the deploy job

    if: github.event.inputs.action == 'destroy'
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3 
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
      - name: Destroy Kubernetes Cluster
        run: |
          cd terraform-eks
          terraform init
          terraform destroy -var-file=terraform.tfvars -auto-approve      

